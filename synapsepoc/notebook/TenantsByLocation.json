{
	"name": "TenantsByLocation",
	"properties": {
		"folder": {
			"name": "Facilities"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ws1sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a29f2b37-c5b7-4a9e-8f71-7db1487fe3c6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/2ba972e5-d964-4ff6-9b9b-bf89377f4391/resourceGroups/rg-1click/providers/Microsoft.Synapse/workspaces/vvssjupq6khjbr7mpocws1/bigDataPools/ws1sparkpool1",
				"name": "ws1sparkpool1",
				"type": "Spark",
				"endpoint": "https://vvssjupq6khjbr7mpocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ws1sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 5,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"customer_path = spark.read.load([\n",
					"    'abfss://synapse@mybigdatalake.dfs.core.windows.net/JLL/Stage/Customer/Customers'\n",
					"    ], format='parquet')"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"location_path = spark.read.load('abfss://synapse@mybigdatalake.dfs.core.windows.net/JLL/Stage/Location/Locations', format='parquet')\n",
					"#location_path.describe()"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import col\n",
					"customer_alias = customer_path.alias('customer_alias')\n",
					"location_alias = location_path.alias('location_alias')\n",
					"\n",
					"tenants = customer_alias.join(location_alias, on=['location-id'], how='inner')\n",
					"tenantsFinal = tenants.select('Location-ID','FirstName','LastName','Address','State1',col('location_alias.Zipcode'),'Latitude','Longitude')\n",
					"#tenantsFinal.show()"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"tenantsFinal.write.format('parquet').mode('overwrite').save(\"abfss://synapse@mybigdatalake.dfs.core.windows.net/JLL/Publish/Tenants\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"diagram": {
						"activateDiagramType": 1,
						"chartConfig": {
							"category": "bar",
							"keys": [],
							"values": [],
							"yLabel": "",
							"xLabel": "",
							"aggregation": "SUM",
							"aggByBackend": false
						},
						"aggData": "{}",
						"isSummary": false,
						"previewData": {
							"filter": null
						},
						"isSql": true
					}
				},
				"source": [
					"%%sql\n",
					"DROP TABLE tenants"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "sparksql"
					},
					"diagram": {
						"activateDiagramType": 1,
						"chartConfig": {
							"category": "bar",
							"keys": [],
							"values": [],
							"yLabel": "",
							"xLabel": "",
							"aggregation": "SUM",
							"aggByBackend": false
						},
						"aggData": "{}",
						"isSummary": false,
						"previewData": {
							"filter": null
						},
						"isSql": true
					}
				},
				"source": [
					"%%sql\n",
					"CREATE TABLE IF NOT EXISTS tenants\n",
					"    USING Parquet\n",
					"    LOCATION \"abfss://synapse@mybigdatalake.dfs.core.windows.net/JLL/Publish/Tenants\""
				],
				"execution_count": 13
			}
		]
	}
}